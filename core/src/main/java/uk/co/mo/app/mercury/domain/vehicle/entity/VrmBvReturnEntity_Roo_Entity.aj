// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package uk.co.mo.app.mercury.domain.vehicle.entity;

import java.lang.Integer;
import java.lang.Long;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Version;
import org.springframework.transaction.annotation.Transactional;
import uk.co.mo.app.mercury.domain.vehicle.entity.VrmBvReturnEntity;

privileged aspect VrmBvReturnEntity_Roo_Entity {
    
    declare @type: VrmBvReturnEntity: @Entity;
    
    @PersistenceContext
    transient EntityManager VrmBvReturnEntity.entityManager;
    
    @Transactional
    public void VrmBvReturnEntity.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void VrmBvReturnEntity.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            VrmBvReturnEntity attached = VrmBvReturnEntity.findVrmBvReturnEntity(this.getBvReturnId());
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void VrmBvReturnEntity.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void VrmBvReturnEntity.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public VrmBvReturnEntity VrmBvReturnEntity.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        VrmBvReturnEntity merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager VrmBvReturnEntity.entityManager() {
        EntityManager em = new VrmBvReturnEntity().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long VrmBvReturnEntity.countVrmBvReturnEntitys() {
        return entityManager().createQuery("SELECT COUNT(o) FROM VrmBvReturnEntity o", Long.class).getSingleResult();
    }
    
    public static List<VrmBvReturnEntity> VrmBvReturnEntity.findAllVrmBvReturnEntitys() {
        return entityManager().createQuery("SELECT o FROM VrmBvReturnEntity o", VrmBvReturnEntity.class).getResultList();
    }
    
    public static VrmBvReturnEntity VrmBvReturnEntity.findVrmBvReturnEntity(Integer id) {
        if (id == null) return null;
        return entityManager().find(VrmBvReturnEntity.class, id);
    }
    
    public static List<VrmBvReturnEntity> VrmBvReturnEntity.findVrmBvReturnEntityEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM VrmBvReturnEntity o", VrmBvReturnEntity.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
