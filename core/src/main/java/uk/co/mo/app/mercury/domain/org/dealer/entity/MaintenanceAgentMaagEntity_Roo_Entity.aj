// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package uk.co.mo.app.mercury.domain.org.dealer.entity;

import java.lang.Integer;
import java.lang.Long;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Version;
import org.springframework.transaction.annotation.Transactional;
import uk.co.mo.app.mercury.domain.org.dealer.entity.MaintenanceAgentMaagEntity;

privileged aspect MaintenanceAgentMaagEntity_Roo_Entity {
    
    declare @type: MaintenanceAgentMaagEntity: @Entity;
    
    @PersistenceContext
    transient EntityManager MaintenanceAgentMaagEntity.entityManager;
    
    @Transactional
    public void MaintenanceAgentMaagEntity.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void MaintenanceAgentMaagEntity.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            MaintenanceAgentMaagEntity attached = MaintenanceAgentMaagEntity.findMaintenanceAgentMaagEntity(this.dealerBean.getAgentNumber());
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void MaintenanceAgentMaagEntity.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void MaintenanceAgentMaagEntity.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public MaintenanceAgentMaagEntity MaintenanceAgentMaagEntity.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        MaintenanceAgentMaagEntity merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager MaintenanceAgentMaagEntity.entityManager() {
        EntityManager em = new MaintenanceAgentMaagEntity().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long MaintenanceAgentMaagEntity.countMaintenanceAgentMaagEntitys() {
        return (Long) entityManager().createQuery("SELECT COUNT(o) FROM MaintenanceAgentMaagEntity o").getSingleResult();
    }
    
    public static List<MaintenanceAgentMaagEntity> MaintenanceAgentMaagEntity.findAllMaintenanceAgentMaagEntitys() {
        return entityManager().createQuery("SELECT o FROM MaintenanceAgentMaagEntity o").getResultList();
    }
    
    public static MaintenanceAgentMaagEntity MaintenanceAgentMaagEntity.findMaintenanceAgentMaagEntity(String agentNumber) {
        if (agentNumber == null) return null;
        return entityManager().find(MaintenanceAgentMaagEntity.class, agentNumber);
    }
    
    public static List<MaintenanceAgentMaagEntity> MaintenanceAgentMaagEntity.findMaintenanceAgentMaagEntityEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM MaintenanceAgentMaagEntity o").setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
