// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package uk.co.mo.app.mercury.domain.vehicle.entity;

import java.util.List;

import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.springframework.transaction.annotation.Transactional;

privileged aspect VehicleEntity_Roo_Entity {
    
    declare @type: VehicleEntity: @Entity;
    
    @PersistenceContext
    transient EntityManager VehicleEntity.entityManager;
    
    @Transactional
    public void VehicleEntity.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void VehicleEntity.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            VehicleEntity attached = VehicleEntity.findVehicleEntity(this.vehicleBean.getAssetNumber());
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void VehicleEntity.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void VehicleEntity.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public VehicleEntity VehicleEntity.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        VehicleEntity merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager VehicleEntity.entityManager() {
        EntityManager em = new VehicleEntity().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long VehicleEntity.countVehicleEntitys() {
        return entityManager().createQuery("SELECT COUNT(o) FROM VehicleEntity o", Long.class).getSingleResult();
    }
    
    public static List<VehicleEntity> VehicleEntity.findAllVehicleEntitys() {
        return entityManager().createQuery("SELECT o FROM VehicleEntity o", VehicleEntity.class).getResultList();
    }
    
    public static VehicleEntity VehicleEntity.findVehicleEntity(Integer id) {
        if (id == null) return null;
        return entityManager().find(VehicleEntity.class, id);
    }
    
    public static VehicleEntity VehicleEntity.findVehicleEntityByRegistrationNumber(String registrationNumber) {
        if (registrationNumber == null) throw new IllegalArgumentException("Registration number is required");
        EntityManager em = VehicleEntity.entityManager();
        Query q = em.createQuery("SELECT VehicleEntity FROM VehicleEntity AS vehicleentity WHERE vehicleentity.carRegistrationNumber = :carRegistrationNumber");
        q.setParameter("carRegistrationNumber", registrationNumber);
        VehicleEntity entity = (VehicleEntity) q.getSingleResult();
        return entity;
    }
    
    public static VehicleEntity VehicleEntity.findVehicleEntityByStockId(Integer stockId) {
        if (stockId == null) throw new IllegalArgumentException("Stock Id is required");
        EntityManager em = VehicleEntity.entityManager();
        Query q = em.createQuery("SELECT VehicleEntity FROM VehicleEntity AS vehicleentity WHERE vehicleentity.stockId = :stockId");
        q.setParameter("stockId", stockId);
        VehicleEntity entity = (VehicleEntity) q.getSingleResult();
        return entity;
    }
    
    
    public static List<VehicleEntity> VehicleEntity.findVehicleEntityEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM VehicleEntity o", VehicleEntity.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
