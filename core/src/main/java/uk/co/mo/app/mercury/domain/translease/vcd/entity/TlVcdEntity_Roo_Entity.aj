// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package uk.co.mo.app.mercury.domain.translease.vcd.entity;

import java.lang.Integer;
import java.lang.Long;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Version;
import org.springframework.transaction.annotation.Transactional;
import uk.co.mo.app.mercury.domain.translease.vcd.entity.TlVcdEntity;

privileged aspect TlVcdEntity_Roo_Entity {
    
    declare @type: TlVcdEntity: @Entity;
    
    @PersistenceContext
    transient EntityManager TlVcdEntity.entityManager;

    @Transactional
    public void TlVcdEntity.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void TlVcdEntity.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            TlVcdEntity attached = TlVcdEntity.findTlVcdEntity( new Long ( this.getTlVcdBean().getTransleaseTransactionNumber() ) );
            this.entityManager.remove(attached);
        }
    }

    @Transactional
    public void TlVcdEntity.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void TlVcdEntity.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public TlVcdEntity TlVcdEntity.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        TlVcdEntity merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager TlVcdEntity.entityManager() {
        EntityManager em = new TlVcdEntity().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long TlVcdEntity.countTlVcdEntitys() {
        return entityManager().createQuery("SELECT COUNT(o) FROM TlVcdEntity o", Long.class).getSingleResult();
    }
    
    public static List<TlVcdEntity> TlVcdEntity.findAllTlVcdEntitys() {
        return entityManager().createQuery("SELECT o FROM TlVcdEntity o", TlVcdEntity.class).getResultList();
    }
    
    public static TlVcdEntity TlVcdEntity.findTlVcdEntity(Long id) {
        if (id == null) return null;
        return entityManager().find(TlVcdEntity.class, id);
    }
    
    public static List<TlVcdEntity> TlVcdEntity.findTlVcdEntityEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM TlVcdEntity o", TlVcdEntity.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
