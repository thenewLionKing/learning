// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package uk.co.mo.app.mercury.domain.translease.transaction.entity;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.springframework.transaction.annotation.Transactional;

privileged aspect TlTransactionEntity_Roo_Entity {

    @PersistenceContext
    transient EntityManager TlTransactionEntity.entityManager;
    
    @Transactional
    public void TlTransactionEntity.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void TlTransactionEntity.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            TlTransactionEntity attached = TlTransactionEntity.findTlTransactionEntity( this.getTlTransactionBean().getTransleaseTransactionNumber() );
            this.entityManager.remove(attached);
        }
    }

    @Transactional
    public void TlTransactionEntity.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void TlTransactionEntity.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public TlTransactionEntity TlTransactionEntity.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        TlTransactionEntity merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager TlTransactionEntity.entityManager() {
        EntityManager em = new TlTransactionEntity().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long TlTransactionEntity.countTlTransactionEntitys() {
        return entityManager().createQuery("SELECT COUNT(o) FROM TlTransactionEntity o", Long.class).getSingleResult();
    }
    
    public static List<TlTransactionEntity> TlTransactionEntity.findAllTlTransactionEntitys() {
        return entityManager().createQuery("SELECT o FROM TlTransactionEntity o", TlTransactionEntity.class).getResultList();
    }
    
    public static TlTransactionEntity TlTransactionEntity.findTlTransactionEntity(Integer id) {
        if (id == null) return null;
        return entityManager().find(TlTransactionEntity.class, id);
    }
    
    public static List<TlTransactionEntity> TlTransactionEntity.findTlTransactionEntityEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM TlTransactionEntity o", TlTransactionEntity.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
