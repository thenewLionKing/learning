// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package uk.co.mo.app.mercury.domain.vehicle.entity;

import java.util.List;

import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.springframework.transaction.annotation.Transactional;

import uk.co.mo.app.mercury.domain.org.dealer.entity.DealerFcsDateEntityPK;

privileged aspect AdaptFittersContactEntity_Roo_Entity {
    
    declare @type: AdaptFittersContactEntity: @Entity;
    
    @PersistenceContext
    transient EntityManager AdaptFittersContactEntity.entityManager;
    
    @Transactional
    public void AdaptFittersContactEntity.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void AdaptFittersContactEntity.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            AdaptFittersContactEntity attached = AdaptFittersContactEntity.findAdaptFittersContactEntity(this.getId());
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void AdaptFittersContactEntity.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void AdaptFittersContactEntity.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public AdaptFittersContactEntity AdaptFittersContactEntity.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        AdaptFittersContactEntity merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager AdaptFittersContactEntity.entityManager() {
        EntityManager em = new AdaptFittersContactEntity().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long AdaptFittersContactEntity.countAdaptFittersContactEntitys() {
        return entityManager().createQuery("SELECT COUNT(o) FROM AdaptFittersContactEntity o", Long.class).getSingleResult();
    }
    
    public static List<AdaptFittersContactEntity> AdaptFittersContactEntity.findAllAdaptFittersContactEntitys() {
        return entityManager().createQuery("SELECT o FROM AdaptFittersContactEntity o", AdaptFittersContactEntity.class).getResultList();
    }
    
    public static AdaptFittersContactEntity AdaptFittersContactEntity.findAdaptFittersContactEntity(AdaptFittersContactEntityPK id) {
        if (id == null) return null;
        return entityManager().find(AdaptFittersContactEntity.class, id);
    }
    
    public static List<AdaptFittersContactEntity> AdaptFittersContactEntity.findAdaptFittersContactEntityEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM AdaptFittersContactEntity o", AdaptFittersContactEntity.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }

    public static int AdaptFittersContactEntity.deleteAdaptFittersContact(AdaptFittersContactEntityPK pk) {
    	Query q = entityManager().createQuery("delete from AdaptFittersContactEntity o where o.id=:id");
        q.setParameter("id", pk);
        return q.executeUpdate(); 
    }
}
