<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:amq="http://activemq.apache.org/schema/core"
       xsi:schemaLocation="
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
       http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core-5.2.0.xsd">

    <!--
         This will automatically locate any and all property files you have
         within your classpath, provided they fall under the META-INF/spring
         directory. The located property files are parsed and their values can
         then be used within application context files in the form of
         ${propertyKey}.
     -->
    <context:property-placeholder location="classpath*:META-INF/spring/*.properties"/>

    <!--
         Turn on AspectJ @Configurable support. As a result, any time you
         instantiate an object, Spring will attempt to perform dependency
         injection on that object. This occurs for instantiation via the "new"
         keyword, as well as via reflection. This is possible because AspectJ
         is used to "weave" Roo-based applications at compile time. In effect
         this feature allows dependency injection of any object at all in your
         system, which is a very useful feature (without @Configurable you'd
         only be able to dependency inject objects acquired from Spring or
         subsequently presented to a specific Spring dependency injection
         method). Roo applications use this useful feature in a number of
         areas, such as @PersistenceContext injection into entities.
     -->
    <context:spring-configured/>

    <!--
         This declaration will cause Spring to locate every @Component,
         @Repository and @Service in your application. In practical terms this
         allows you to write a POJO and then simply annotate the new POJO as an
         @Service and Spring will automatically detect, instantiate and
         dependency inject your support at startup time. Importantly, you can
         then also have your new support injected into any other class that
         requires it simply by declaring a field for your support inside the
         relying class and Spring will inject it. Note that two exclude filters
         are declared. The first ensures that Spring doesn't spend time
         introspecting Roo-specific ITD aspects. The second ensures Roo doesn't
         instantiate your @Controller classes, as these should be instantiated
         by a web tier application context. Refer to web.xml for more details
         about the web tier application context setup services.

         Furthermore, this turns on @Autowired, @PostConstruct etc support. These
         annotations allow you to use common Spring and Java Enterprise Edition
         annotations in your classes without needing to do any special configuration.
         The most commonly used annotation is @Autowired, which instructs Spring to
         dependency inject an object into your class.
     -->
    <context:component-scan base-package="uk.co.mo.app.mercury">
        <context:exclude-filter expression=".*_Roo_.*" type="regex"/>
        <context:exclude-filter expression="org.springframework.stereotype.Controller" type="annotation"/>
    </context:component-scan>

    <bean id="serverConfig" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="properties">
            <props>
                <prop key="app_ejb_event_scheduler_timer">${app.ejb.event.scheduler.timer}</prop>
                <prop key="app_ejb_event_notification_timeout">${app.ejb.event.notification.timeout}</prop>
            </props>
        </property>
    </bean>


    <tx:annotation-driven mode="aspectj" transaction-manager="transactionManager" order="0"/>


    <!-- start of datasource conf -->

    <bean abstract="true" id="enterpriseDS">
        <property name="dataSource" ref="enterpriseDataSource"/>
    </bean>
    <bean id="enterpriseSessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean"
          parent="enterpriseDS">
        <property name="mappingLocations">
            <list>
                <value>classpath*:META-INF/enterprise/**/HibernateDefinitions.hbm.xml</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
            </props>
        </property>
    </bean>


    <bean abstract="true" id="soaInterfaceDS">
        <property name="dataSource" ref="soaInterfaceDataSource"/>
    </bean>

    <bean id="soaInterfaceSessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean"
          parent="soaInterfaceDS">
        <property name="mappingLocations">
            <list>
                <value>classpath*:META-INF/soaInterface/**/HibernateDefinitions.hbm.xml</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
            </props>
        </property>
    </bean>

    <bean abstract="true" id="drsLondonDS">
        <property name="dataSource" ref="drsLondonDataSource"/>
    </bean>

    <bean id="drsLondonSessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean"
          parent="drsLondonDS">
        <property name="mappingLocations">
            <list>
                <value>classpath*:META-INF/drsLondon/**/HibernateDefinitions.hbm.xml</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
            </props>
        </property>
    </bean>

    <!-- start of JMS conf -->


 	<!-- CachingConnectionFactory Definition, sessionCacheSize property is the number of sessions to cache -->
 	<bean id="connectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
     	<constructor-arg ref="jmsConnectionFactory" />
	    <property name="exceptionListener" ref="jmsExceptionListener" />
    	<property name="sessionCacheSize" value="50" />
	</bean>

	<!-- JmsTemplate Definition -->
	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
    	<constructor-arg ref="connectionFactory"/>
    	<property name="sessionTransacted" value="true" />
        <property name="destinationResolver" ref="jmsMercuryEventsQDR"/>
	</bean>

	<!-- Set the name of the queue destination -->
    <bean id="jmsMercuryEventsQDR" class="org.springframework.jms.support.destination.BeanFactoryDestinationResolver"/>

    <!-- listener container definition using the jms namespace, concurrency is the max number of concurrent listeners that can be started -->
      <!--jms:listener-container concurrency="1-10" transaction-manager="transactionManager" cache="consumer">
      </jms:listener-container-->
    

    <!-- Appserver conf -->

    <jee:jndi-lookup id="enterpriseDataSource" jndi-name="jdbc/EnterpriseDS" resource-ref="true"/>
    <jee:jndi-lookup id="soaInterfaceDataSource" jndi-name="jdbc/SOAInterfaceDS" resource-ref="true"/>
    <jee:jndi-lookup id="jtaTransactionManager" jndi-name="javax/transaction/TransactionManager" resource-ref="true"/>
    <jee:jndi-lookup id="jmsConnectionFactory" jndi-name="mercury/jms/MercuryJmsCF" resource-ref="true"/>
    <jee:jndi-lookup id="jmsMercuryEventsQ" jndi-name="mercury/jms/mercuryOutboundSAF" resource-ref="true"/>
    <jee:jndi-lookup id="drsLondonDataSource" jndi-name="jdbc/DRSLondonDS" resource-ref="true"/>

    <bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="transactionManager" ref="jtaTransactionManager"/>
    </bean>

  	<bean id="persistenceUnitManager" class="org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager">
        <property name="persistenceXmlLocations">
            <list>
                <value>classpath:META-INF/persistence.xml</value>
                <value>classpath:META-INF/persistenceDRS.xml</value>
            </list>
        </property>
  <!--       <property name="dataSourceLookup" >
			<map>
    			<entry key="enterpriseDataSource" value-ref="enterpriseDataSource" />
    			<entry key="drsLondonDataSource" value-ref="drsLondonDataSource" />
   			</map>        
        </property> -->
<!--         <property name="dataSourceLookup" ref="enterpriseDataSource"/> -->
	</bean>


      <bean class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" id="entityManagerFactory"
          parent="enterpriseDS">
        <property name="persistenceUnitName" value="enterprisePersistenceUnit"/>
          <property name="jpaVendorAdapter">
              <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
          </property>
        <property name="jpaProperties">
            <props>
                <!--<prop key="hibernate.transaction.factory_class">org.hibernate.transaction.JTATransactionFactory</prop>-->
                <prop key="hibernate.transaction.manager_lookup_class">org.hibernate.transaction.WeblogicTransactionManagerLookup</prop>
            </props>
        </property>
    </bean>


    <task:annotation-driven/>

    <bean id="castorMarshaller" class="org.springframework.oxm.castor.CastorMarshaller">
        <property name="mappingLocation" value="classpath:CastorMapping.xml"/>
        <property name="suppressXsiType" value="true"/>
    </bean>
</beans>
